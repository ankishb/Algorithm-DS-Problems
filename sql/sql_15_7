
############################################
182. Duplicate Emails
Easy
SQL Schema

Write a SQL query to find all duplicate emails in a table named Person.

+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+

For example, your query should return the following for the above table:

+---------+
| Email   |
+---------+
| a@b.com |
+---------+

Note: All emails are in lowercase



# 1.Method
SELECT Email
FROM Person
GROUP BY Email
having COUNT(Email) > 1; 


# 2.Method
select stat.Email
from (
    select Email, count(Email) as cont_
    from Person
    group by Email
) as stat
where cont_ > 1;


# 3.Method
SELECT DISTINCT Person.Email 
FROM Person 
GROUP BY Person.Email
HAVING COUNT(Person.Email) > 1




############################################
Combine Two Tables
Easy
SQL Schema
Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| PersonId    | int     |
| FirstName   | varchar |
| LastName    | varchar |
+-------------+---------+
PersonId is the primary key column for this table.

Table: Address

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| AddressId   | int     |
| PersonId    | int     |
| City        | varchar |
| State       | varchar |
+-------------+---------+
AddressId is the primary key column for this table.

 

Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:

FirstName, LastName, City, State


# 1. Method
select FirstName, LastName, City, State
from Person
left join Address 
on Person.PersonId = Address.PersonId;

2. Method
select FirstName, LastName, City, State
from Person
left join Address 
USING(PersonId);






############################################
Employees Earning More Than Their Managers
Easy
SQL Schema

The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.

+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+

Given the Employee table, write a SQL query that finds out employees who earn more than their managers. For the above table, Joe is the only employee who earns more than his manager.

+----------+
| Employee |
+----------+
| Joe      |
+----------+



# 1. Method
select na_ as "Employee" 
from (
	select t1.Name as na_, t1.Salary as t1_sal, t2.Salary as t2_sal from Employee as t1
	left join Employee as t2
	on t1.ManagerId = t2.Id
	having t2_sal < t1_sal
) a;


# 2. Method
Approach I: Using AS clause [Accepted]

SELECT *
FROM 
	Employee AS a, 
	Employee AS b;

    Note: The keyword 'AS' is optional.

Select from two tables will get the Cartesian product of these two tables. In this case, the output will be 4*4 = 16 records.


SELECT
    *
FROM
    Employee AS a,
    Employee AS b
WHERE
    a.ManagerId = b.Id
    AND a.Salary > b.Salary ;


Id 	Name 	Salary 	ManagerId 	Id 	Name 	Salary 	ManagerId
1 	Joe 	70000 	3 	3 	Sam 	60000 	

As we only need to output the employee's name, so we modify the above code a little to get a solution.

MySQL

SELECT
    a.Name AS 'Employee'
FROM
    Employee AS a,
    Employee AS b
WHERE
    a.ManagerId = b.Id
        AND a.Salary > b.Salary ;



Approach II: Using JOIN clause [Accepted]

Algorithm

Actually, JOIN is a more common and efficient way to link tables together, and we can use ON to specify some conditions.

SELECT
     a.NAME AS Employee
FROM Employee AS a JOIN Employee AS b
     ON a.ManagerId = b.Id
     AND a.Salary > b.Salary ;



# 3. Method
select E.name as Employee 
from Employee E
join Employee as M
on E.ManagerId = M.Id
where E.Salary > M.Salary;


# 4. Method
SELECT e1.Name as Employee
FROM Employee as e1, Employee as e2
WHERE e1.ManagerId = e2.Id  
AND e1.Salary > e2.Salary;


Where:

select 
e1.Name
from Employee e1, Employee e2
where e1.ManagerId = e2.Id and e1.Salary > e2.Salary

Join:

select e1.Name
from Employee e1 
join Employee e2
on e1.ManagerId = e2.Id 
and e1.Salary>e2.Salary




############################################
