
// My Approach: O(2*N)
// There are two case:
// Case 1: first two elements are intact, so we have a and d, we can check the entire sequence, we they follow the AP with (a, d) as [a, a+d, a+2d, a+3d], by counting the wrong element. If the count is 1, we found the element.
// Case 2: if case first fail, which ensure that element lie in first two element, chose last two element to compute (a, d), Now, move in backward as [a, a-d, a-2d, a-3d]

#include <bits/stdc++.h>
using namespace std;

bool recover_sequence(vector<int> &vect){
	int n = vect.size();
	// case 1.
	int count = 0;
	int a = vect[0];
	int d = vect[1] - vect[0];
	int missing_idx;
	for(int i=2; i<n; i++){
		if(a+i*d != vect[i]){
			count++;
			missing_idx = i;
			if(count == 2) break;
		}
		// cout<<a+i*d<<" : "<<vect[i]<<" : "<<missing_idx<<endl;
	}
	if(count==0) return true;
	// if count 1, we recover the seq
	if(count == 1){
		vect[missing_idx] = a+missing_idx*d;
		return true;
	}

	// case 2.
	count = 0;
	a = vect[n-1];
	d = vect[n-1] - vect[n-2];
	missing_idx;
	int idx = 1;
	for(int i=n-3; i>=0; i--){
		idx++;
		if(a-idx*d != vect[i]){
			count++;
			missing_idx = i;
		}
		// cout<<a-idx*d<<" : "<<vect[i]<<" : "<<missing_idx<<endl;
	}
	vect[missing_idx] = a-(n-missing_idx-1)*d;
	return true;
}

int main()
{
	int test;
	cin>>test;
	while(test--){
		int n;
		cin>>n;
		vector<int> vect(n);
		for(int i=0; i<n; i++){
			cin>>vect[i];
		}

		bool ans;
		ans = recover_sequence(vect);
		for(auto itr : vect){
			cout<<itr<<" ";
		}
		cout<<'\n';
	}
	return 0;
}


 [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 199 198 198 199 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 199 198 198 198 198 199 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 199 198 198 198 198 198 198 199 199 199 199 199 199 ] [199 199 199 199 199 199 199 199 199 198 198 198 198 198 198 198 198 199 199 199 199 199 ] [198 199 199 199 199 199 199 199 198 198 198 198 198 198 198 198 198 198 199 199 199 199 ] [198 198 199 199 199 199 199 198 198 198 198 198 198 198 198 198 198 198 198 199 199 199 ] [198 198 198 199 199 199 198 198 198 198 198 198 198 198 198 198 198 198 198 198 199 198 ] [198 198 198 198 199 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 197 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 197 197 ] [198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 198 197 ] 